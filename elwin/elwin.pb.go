// Code generated by protoc-gen-go.
// source: elwin.proto
// DO NOT EDIT!

/*
Package elwin is a generated protocol buffer package.

It is generated from these files:
	elwin.proto

It has these top-level messages:
	Identifier
	Experiments
	Experiment
	Param
*/
package elwin

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Identifier struct {
	TeamID string `protobuf:"bytes,1,opt,name=teamID" json:"teamID,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
}

func (m *Identifier) Reset()                    { *m = Identifier{} }
func (m *Identifier) String() string            { return proto.CompactTextString(m) }
func (*Identifier) ProtoMessage()               {}
func (*Identifier) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Experiments struct {
	Experiments map[string]*Experiment `protobuf:"bytes,1,rep,name=experiments" json:"experiments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Experiments) Reset()                    { *m = Experiments{} }
func (m *Experiments) String() string            { return proto.CompactTextString(m) }
func (*Experiments) ProtoMessage()               {}
func (*Experiments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Experiments) GetExperiments() map[string]*Experiment {
	if m != nil {
		return m.Experiments
	}
	return nil
}

type Experiment struct {
	Params []*Param `protobuf:"bytes,1,rep,name=params" json:"params,omitempty"`
}

func (m *Experiment) Reset()                    { *m = Experiment{} }
func (m *Experiment) String() string            { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()               {}
func (*Experiment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Experiment) GetParams() []*Param {
	if m != nil {
		return m.Params
	}
	return nil
}

type Param struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Param) Reset()                    { *m = Param{} }
func (m *Param) String() string            { return proto.CompactTextString(m) }
func (*Param) ProtoMessage()               {}
func (*Param) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Identifier)(nil), "elwin.Identifier")
	proto.RegisterType((*Experiments)(nil), "elwin.Experiments")
	proto.RegisterType((*Experiment)(nil), "elwin.Experiment")
	proto.RegisterType((*Param)(nil), "elwin.Param")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Elwin service

type ElwinClient interface {
	GetNamespaces(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Experiments, error)
}

type elwinClient struct {
	cc *grpc.ClientConn
}

func NewElwinClient(cc *grpc.ClientConn) ElwinClient {
	return &elwinClient{cc}
}

func (c *elwinClient) GetNamespaces(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Experiments, error) {
	out := new(Experiments)
	err := grpc.Invoke(ctx, "/elwin.Elwin/GetNamespaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Elwin service

type ElwinServer interface {
	GetNamespaces(context.Context, *Identifier) (*Experiments, error)
}

func RegisterElwinServer(s *grpc.Server, srv ElwinServer) {
	s.RegisterService(&_Elwin_serviceDesc, srv)
}

func _Elwin_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElwinServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elwin.Elwin/GetNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElwinServer).GetNamespaces(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _Elwin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elwin.Elwin",
	HandlerType: (*ElwinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamespaces",
			Handler:    _Elwin_GetNamespaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("elwin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xcd, 0x29, 0xcf,
	0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x6c, 0xb8, 0xb8, 0x3c,
	0x53, 0x52, 0xf3, 0x4a, 0x32, 0xd3, 0x32, 0x53, 0x8b, 0x84, 0xc4, 0xb8, 0xd8, 0x4a, 0x52, 0x13,
	0x73, 0x3d, 0x5d, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x90, 0x78, 0x69, 0x71,
	0x6a, 0x11, 0x50, 0x9c, 0x09, 0x22, 0x0e, 0xe1, 0x29, 0x2d, 0x67, 0xe4, 0xe2, 0x76, 0xad, 0x28,
	0x48, 0x2d, 0xca, 0xcc, 0x05, 0x9a, 0x51, 0x2c, 0xe4, 0x0a, 0xb4, 0x03, 0xc1, 0x05, 0x1a, 0xc2,
	0xac, 0xc1, 0x6d, 0xa4, 0xac, 0x07, 0xb1, 0x17, 0x49, 0x21, 0x32, 0xdb, 0x35, 0xaf, 0xa4, 0xa8,
	0x32, 0x08, 0x59, 0x9f, 0x54, 0x20, 0x97, 0x00, 0xba, 0x02, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4,
	0x4a, 0xa8, 0xbb, 0x40, 0x4c, 0x21, 0x75, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0xb0, 0x9b,
	0xb8, 0x8d, 0x04, 0x31, 0xac, 0x09, 0x82, 0xc8, 0x5b, 0x31, 0x59, 0x30, 0x2a, 0x19, 0x71, 0x71,
	0x21, 0x24, 0x84, 0x54, 0xb8, 0xd8, 0x0a, 0x12, 0x8b, 0x12, 0x73, 0x61, 0x4e, 0xe4, 0x81, 0xea,
	0x0d, 0x00, 0x09, 0x06, 0x41, 0xe5, 0x94, 0xf4, 0xb9, 0x58, 0xc1, 0x02, 0x58, 0xec, 0x16, 0x41,
	0xb6, 0x9b, 0x13, 0x6a, 0x91, 0x91, 0x23, 0x17, 0xab, 0x2b, 0xc8, 0x1c, 0x21, 0x0b, 0x2e, 0x5e,
	0xf7, 0xd4, 0x12, 0xbf, 0xc4, 0xdc, 0xd4, 0xe2, 0x82, 0xc4, 0xe4, 0xd4, 0x62, 0x21, 0x98, 0xe3,
	0x10, 0x61, 0x2d, 0x25, 0x84, 0x19, 0x2c, 0x4a, 0x0c, 0x49, 0x6c, 0xe0, 0xd8, 0x31, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xe9, 0x12, 0xc1, 0xc1, 0xac, 0x01, 0x00, 0x00,
}
